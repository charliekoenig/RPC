#!/bin/env python3
import subprocess
import json
import sys
import os

INDENT = 4
curr_indent_p = 0
indent_it_p = True
curr_indent_s = 0
indent_it_s = True

def print_line (fd, line, p_or_s):
    global curr_indent_p, indent_it_p, curr_indent_s, indent_it_s
    if ("}" in line) and ("{" in line):
        if p_or_s:
            if indent_it_p: fd.write(" " * curr_indent_p)
        else:
            if indent_it_s: fd.write(" " * curr_indent_s)
    elif ("{" in line):
        if p_or_s:
            if indent_it_p: fd.write(" " * curr_indent_p)
            curr_indent_p += INDENT
        else:
            if indent_it_s: fd.write(" " * curr_indent_s)
            curr_indent_s += INDENT
    elif ("}" in line):
        if p_or_s:
            curr_indent_p -= INDENT
            if indent_it_p: fd.write(" " * curr_indent_p)
        else:
            curr_indent_s -= INDENT
            if indent_it_s: fd.write(" " * curr_indent_s)
    else:
        if p_or_s:
            if indent_it_p: fd.write(" " * curr_indent_p)
        else:
            if indent_it_s: fd.write(" " * curr_indent_s)

    if p_or_s:
        indent_it_p = "\n" in line
    else:
        indent_it_s = "\n" in line
    fd.write(line)

IDL_TO_JSON_EXECUTABLE = './idl_to_json'

try:
    # Make sure invoked properly
    assert len(sys.argv) == 2, "Wrong number of arguments"

    # Make sure IDL file exists and is readable
    filename = sys.argv[1]
    assert os.path.isfile(filename), f"Path {filename} does not designate a file"
    assert os.access(filename, os.R_OK), f"File {filename} is not readable"

    # Create the proxy and stub files for the IDL
    prog_name = filename[:-4]

    proxy = open(f"{prog_name}.proxy.cpp", "w")
    stub = open(f"{prog_name}.stub.cpp", "w")

    # Make sure idl_to_json exists and is executable
    assert os.path.isfile(IDL_TO_JSON_EXECUTABLE), f"Path {IDL_TO_JSON_EXECUTABLE} does not designate a file...run \"make\" to create it" 
    assert os.access(IDL_TO_JSON_EXECUTABLE, os.X_OK), f"File {IDL_TO_JSON_EXECUTABLE} exists but is not executable"

    # Parse declarations into a Python dictionary
    decls = json.loads(subprocess.check_output([IDL_TO_JSON_EXECUTABLE, filename]))

    # Set up the libraries and namespaces
    print_line(stub, f"#include \"{filename}\"\n", False)
    print_line(stub, "\n#include \"rpcstubhelper.h\"\n", False)
    print_line(stub, "\n#include <cstdio>", False)
    print_line(stub, "\n#include <cstring>\n", False)
    print_line(stub, "\nusing namespace C150NETWORK;\n\n", False)

    print_line(proxy, f"#include \"{filename}\"\n", True)
    print_line(proxy, "\n#include \"rpcproxyhelper.h\"\n", True)
    print_line(proxy, "\n#include <cstdio>", True)
    print_line(proxy, "\n#include <cstring>\n", True)
    print_line(proxy, "\nusing namespace C150NETWORK;\n\n", True)

    # Loop printing each function signature
    for  name, sig in decls["functions"].items():

        # Python List of all args (each is a dictionary with keys "name" and "type")
        args = sig["arguments"]

        # Make a string of form:  "type1 arg1, type2 arg2" for use in function sig
        argstring = ', '.join([a["type"] + ' ' + a["name"] for a in args])

        # print the function signature
        print_line(proxy, f"{sig['return_type']} {name}({argstring}) {{\n", True)
        print_line(stub, f"void __{name}() {{\n", False)

        # fill in function defs in proxy
        print_line(proxy, f"int fNameLen = strlen(\"{name}\");\n", True)
        print_line(proxy, "RPCPROXYSOCKET->write((const char *) &fNameLen, sizeof(fNameLen));\n", True)
        print_line(proxy, f"RPCPROXYSOCKET->write(\"{name}\", strlen(\"{name}\"));\n\n", True)

        for i in range(0, len(args)):
            print_line(proxy, f"RPCPROXYSOCKET->write((const char *) &{args[i]['name']}, sizeof({args[i]['name']}));\n\n", True)
        
        if (sig["return_type"] != "void"):
            print_line(proxy, f"{args[i]['type']} retVal;\n", True)
            print_line(proxy, "RPCPROXYSOCKET->read((char *) &retVal, sizeof(retVal));\n\n", True)

        print_line(proxy, "char readBuffer[4];\n", True)
        print_line(proxy, "RPCPROXYSOCKET->read(readBuffer, 4);\n", True)
        print_line(proxy, "if (strncmp(readBuffer, \"DONE\", 4) != 0) { throw C150Exception(\"error\"); }\n\n", True)

        if (sig["return_type"] != "void"):
            print_line(proxy, "return retVal;", True)

        # fill in function defs in stub
        print_line(stub, "char doneBuffer[5] = \"DONE\";\n\n", False)

        for i in range(0, len(args)):
            print_line(stub, f"{args[i]['type']} {args[i]['name']};\n", False)
            print_line(stub, f"RPCSTUBSOCKET->read((char *) &{args[i]['name']}, sizeof({args[i]['name']}));\n\n", False)

        if (sig["return_type"] != "void"):
            print_line(stub, f"{sig['return_type']} retVal = {name}(", False)
        else:
            print_line(stub, f"{name}(", False)

        for i in range(0, len(args)):
            print_line(stub, f"{args[i]['name']}", False)
            if (i + 1 != len(args)):
                print_line(stub, ", ", False)

        print_line(stub, ");\n\n", False)

        if (sig["return_type"] != "void"):
            print_line(stub, "RPCSTUBSOCKET->write((const char *) &retVal, sizeof(retVal));\n", False)

        print_line(stub, "RPCSTUBSOCKET->write(doneBuffer, strlen(doneBuffer));", False)
        
        # end function definition
        print_line(proxy, "\n}\n\n", True)
        print_line(stub, "\n}\n\n", False)

    print_line(stub, "void dispatchFunction() {\n", False)
    print_line(stub, "int fNameLen;\n", False)
    print_line(stub, "RPCSTUBSOCKET->read((char *) &fNameLen, sizeof(fNameLen));\n\n", False)
    print_line(stub, "char functionNameBuffer[fNameLen + 1];\n\n", False)
    print_line(stub, "RPCSTUBSOCKET->read(functionNameBuffer, fNameLen);\n", False)
    print_line(stub, "functionNameBuffer[fNameLen] = '\\0';\n\n", False)
    print_line(stub, "if (!RPCSTUBSOCKET-> eof()) {\n", False)
    
    for  name, sig in decls["functions"].items():
        print_line(stub, f"if (strcmp(functionNameBuffer, \"{name}\") == 0) {{\n", False)
        print_line(stub, f"__{name}();\n", False)
        print_line(stub, "} else ", False)

    print_line(stub, "{\n", False)
    print_line(stub, "throw C150Exception(\"error\");\n", False)
    print_line(stub, "}\n", False)
    print_line(stub, "}\n}\n", False)


    # Close the proxy and stub files for the IDL
    proxy.close()
    stub.close()

except Exception as e:
    print(str(e), file=sys.stderr)
    print(f"Usage: {sys.argv[0]} <idlfilename>", file=sys.stderr)