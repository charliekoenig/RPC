#!/bin/env python3
import subprocess
import json
import sys
import os

INDENT = 4

def print_indexed_array(indexed_array) -> str:

    ret_str = indexed_array.split("[")
    ret_str = '[\" << '.join(ret_str)
    ret_str = ret_str.split("]")
    ret_str = ' << \"]'.join(ret_str)

    return ret_str

def indent_it(indentation) -> str:

    return INDENT * indentation * " "

def IF(condition, iftrue, iffalse, indentation) -> str:

    ifBase = f"if ({condition}) {{" + "\n" + \
            indent_it(indentation + 1) +  f"{iftrue}" + "\n" + \
            indent_it(indentation) + "}"

    if iffalse is not None:
        ifBase = ifBase + " else " + iffalse
    
    return ifBase

def ELSE(body, indentation) -> str:

    return "{\n" + \
            indent_it(indentation + 1) + body + "\n" + \
            indent_it(indentation) + "}"

def BODY(body, indentation) -> str:

    i = indent_it(indentation)
    return ''.join(list(map(lambda line : i + line + "\n", body)))

def BLOCK(type, clause, body, indentation) -> str:

    i = indent_it(indentation - 1)
    code_block = "\n" + i + f"{type} ({clause}) {{ \n{BODY(body, indentation)}" + i + "}\n"

    return code_block

def deserialize_array(arg_name, arg_type, types, body, indentation):

    if types[arg_type]["type_of_type"] == "array":
        i = indentation + 1
        arg_name = arg_name + f"[i{i - 2}]"
        count = types[arg_type]["element_count"]
        next_arg_type = types[arg_type]["member_type"]

        b = deserialize_array(arg_name, next_arg_type, types, [], i)
        body.append(BLOCK("for", f"int i{i - 2} = 0; i{i - 2} < {count}; i{i - 2}++", b, i))

        return body
    
    else:
        return deserialize(arg_name, arg_type, types, body, True, indentation)

def serialize_array(arg_name, arg_type, types, body, indentation, src):
    
    if types[arg_type]["type_of_type"] == "array":
        i = indentation + 1
        arg_name = arg_name + f"[i{i - 2}]"
        count = types[arg_type]["element_count"]
        next_arg_type = types[arg_type]["member_type"]

        b = serialize_array(arg_name, next_arg_type, types, [], i, src)
        body.append(BLOCK("for", f"int i{i - 2} = 0; i{i - 2} < {count}; i{i - 2}++", b, i))

        return body
    
    else:
        return serialize(arg_name, arg_type, types, body, src, indentation)


def deserialize(arg_name, arg_type, types, body, nested_structure, indentation):
    
    writetype = "" if "." in arg_name or nested_structure else f"{arg_type} "
    log_style_arg = print_indexed_array(arg_name)
    
    if arg_type == "string":
        body.append(f"{writetype}{arg_name} = getStringFromStream();")
        body.append(f"*GRADING << \"Received value for {log_style_arg} of type string - message: \\\"\" << {arg_name} << \"\\\", length: \" << {arg_name}.length() + 1 << endl;\n")
    
    elif types[arg_type]["type_of_type"] == "builtin": 
        body.append(f"{writetype}{arg_name} = sto{arg_type[0]}(getStringFromStream());")
        body.append(f"*GRADING << \"Received value \" << {arg_name} << \" (of type {arg_type} in string form) for {log_style_arg}\" << endl;\n")
    
    elif types[arg_type]["type_of_type"] == "array":
        count = types[arg_type]["element_count"]
        if not nested_structure:
            body.append(f"{arg_type.split('__')[1].split('[')[0]} {arg_name}{arg_type[arg_type.index('['):]};")
        b = deserialize_array(arg_name, arg_type, types, [], indentation)
        body.append(BODY(b, 0))

    elif types[arg_type]["type_of_type"] == "struct":
        if "." not in arg_name and not nested_structure:
            body.append(f"{writetype}{arg_name};")

        for member in types[arg_type]["members"]:
            deserialize(f"{arg_name}.{member['name']}", member['type'], types, body, True, indentation)

    return body
            

def serialize(arg_name, arg_type, types, body, src, indentation):
    
    valid_var = arg_name.replace('.', "").replace('[', "").replace(']', "")
    log_style_arg = print_indexed_array(arg_name)
    
    if arg_type == "string":
        body.append(f"RPC{src}SOCKET->write({arg_name}.c_str(), {arg_name}.length() + 1);")
        body.append(f"*GRADING << \"Sending value of {log_style_arg} of type string - message: \\\"\" << {arg_name} << \"\\\", length: \" << {arg_name}.length() + 1 << endl;\n")
        
    elif types[arg_type]["type_of_type"] == "builtin": 
        body.append(f"string {valid_var}StringRep = to_string({arg_name});")
        body.append(f"*GRADING << \"Converting \" << {arg_name} << \" of type {arg_type} to string\" << endl;\n")
        body.append(f"RPC{src}SOCKET->write({valid_var}StringRep.c_str(), {valid_var}StringRep.length() + 1);")
        body.append(f"*GRADING << \"Sending value of {log_style_arg} in string form - message: \\\"\" << {arg_name} << \"\\\", length: \" << {valid_var}StringRep.length() + 1 << endl;\n")
        
    elif types[arg_type]["type_of_type"] == "array":
        b = serialize_array(arg_name, arg_type, types, [], indentation, src)
        body.append(BODY(b, 0))

    elif types[arg_type]["type_of_type"] == "struct":
        for member in types[arg_type]["members"]:
            serialize(f"{arg_name}.{member['name']}", member['type'], types, body, src, indentation)

    return body

def proxy_function_setup(name, sig, types):
    
    return_type = sig["return_type"]
    args        = sig["arguments"]

    argstring = ', '.join(a["type"] + ' ' + a["name"] if types[a["type"]]['type_of_type'] != "array"
                else f"{a['type'].split('__')[1].split('[')[0]} {a['name']}{a['type'][a['type'].index('['):]}" 
                for a in args)

    body = [f"RPCPROXYSOCKET->write(\"{name}\", strlen(\"{name}\") + 1);", 
            f"*GRADING << \"Invoking function {name} remotely - message: \\\"{name}\\\", length: \" << strlen(\"{name}\") + 1 << endl;"]
    return f"{return_type} {name}", argstring, body

def proxy_function_wrapup():

    return ["char readBuffer[4];", 
            "RPCPROXYSOCKET->read(readBuffer, 4);",
            IF("strncmp(readBuffer, \"DONE\", 4) != 0", "throw C150Exception(\"error\");", None, 1),
            f"*GRADING << \"Returned successfully from RPC\"<< endl;"]

def stub_function_setup(name):
    
    return f"void __{name}", ["char doneBuffer[5] = \"DONE\";"]

def stub_function_wrapup():
    
    return ["RPCSTUBSOCKET->write(doneBuffer, strlen(doneBuffer));", 
            f"*GRADING << \"Function {name} invocation done\"<< endl;"]

def print_read_function(fd, sname):

    function_body = ["char bufp = '\\0';",
                     "vector<char> stringRead;",
                     "int readlen = 1;",
                     BLOCK("while", "readlen == 1", 
                             [f"readlen = RPC{sname}SOCKET-> read(&bufp, 1);", 
                              "stringRead.push_back(bufp);",
                              IF("bufp == '\\0'", "break;", None, 2)], 2),
                     "return stringRead.data();"]
    
    fd.write(BLOCK("string getStringFromStream", "", function_body, 1))

IDL_TO_JSON_EXECUTABLE = './idl_to_json'

try:
    # Make sure invoked properly
    assert len(sys.argv) == 2, "Wrong number of arguments"

    # Make sure IDL file exists and is readable
    filename = sys.argv[1]
    assert os.path.isfile(filename), f"Path {filename} does not designate a file"
    assert os.access(filename, os.R_OK), f"File {filename} is not readable"

    # Create the proxy and stub files for the IDL
    prog_name = filename[:-4]

    proxy = open(f"{prog_name}.proxy.cpp", "w")
    stub = open(f"{prog_name}.stub.cpp", "w")

    # Make sure idl_to_json exists and is executable
    assert os.path.isfile(IDL_TO_JSON_EXECUTABLE), f"Path {IDL_TO_JSON_EXECUTABLE} does not designate a file...run \"make\" to create it" 
    assert os.access(IDL_TO_JSON_EXECUTABLE, os.X_OK), f"File {IDL_TO_JSON_EXECUTABLE} exists but is not executable"

    # Parse declarations into a Python dictionary
    decls = json.loads(subprocess.check_output([IDL_TO_JSON_EXECUTABLE, filename]))

    # Set up the libraries and namespaces
    includes = ["#include <cstdio>", "#include <cstring>", "#include <string>", "", "using namespace std;", "", f"#include \"{filename}\"", "#include \"c150grading.h\"", "", "using namespace C150NETWORK;", "", "string getStringFromStream();", ""]
    stub.write(BODY(["#include \"rpcstubhelper.h\"", "#include <vector>"] + includes, 0))
    proxy.write(BODY(["#include \"rpcproxyhelper.h\""] + includes, 0))

    # Loop printing each function signature
    types = decls["types"]
    for  name, sig in decls["functions"].items():
        proxy_func_name, proxy_args, proxy_body = proxy_function_setup(name, sig, types)
        stub_func_name, stub_body = stub_function_setup(name)

        for arg in sig["arguments"]:
            proxy_body += [f"*GRADING << \"Serializing parameter {arg['name']}\"<< endl;"]
            serialized = serialize(arg["name"], arg["type"], types, [], "PROXY", 1)
            deserialized = deserialize(arg["name"], arg["type"], types, [], False, 1)

            proxy_body += serialized
            stub_body += deserialized

        # handle non void returns
        return_type = sig["return_type"]
        argstring = ', '.join([a["name"] for a in sig["arguments"]])

        stub_body += [f"*GRADING << \"Function {name} invoked locally\" << endl;"]
        if return_type == "void":
            stub_body += [f"{name}({argstring});"]
        else: 
            stub_body += [f"{return_type} retVal = {name}({argstring});"]

            serialized = serialize("retVal", return_type, types, [], "STUB", 1)
            deserialized = deserialize("retVal", return_type, types, [], False, 1)

            proxy_body += deserialized
            stub_body += serialized

        proxy_body += proxy_function_wrapup()
        stub_body += stub_function_wrapup()

        if return_type != "void":
            proxy_body += ["", "return retVal;"]

        proxy.write(BLOCK(proxy_func_name, proxy_args, proxy_body, 1))
        stub.write(BLOCK(stub_func_name, "", stub_body, 1))

    dispatch_body = ["string functionName = getStringFromStream();"]

    listFunctionNames = list(decls['functions'].items())
    if len(listFunctionNames) > 0:
        dispatchStr = IF(f"functionName == \"{listFunctionNames[0][0]}\"", f"__{listFunctionNames[0][0]}();", ELSE("RPCSTUBSOCKET->write(\"BAD\", strlen(\"BAD\") + 1);", 2), 2)
        tempDispatchStr = ""

    if len(listFunctionNames) > 1:
        for name, sig in listFunctionNames[1:]:
            tempDispatchStr = IF(f"functionName == \"{name}\"", f"__{name}();", dispatchStr, 2)
            dispatchStr = tempDispatchStr

    if len(listFunctionNames) > 0:
        dispatch_body += [IF("!RPCSTUBSOCKET-> eof()", dispatchStr, None, 1)] 
    
    stub.write(BLOCK("void dispatchFunction", "", dispatch_body, 1))

    print_read_function(proxy, "PROXY")
    print_read_function(stub, "STUB")

    # Close the proxy and stub files for the IDL
    proxy.close()
    stub.close()

except Exception as e:
    print(str(e), file=sys.stderr)
    print(f"Usage: {sys.argv[0]} <idlfilename>", file=sys.stderr)